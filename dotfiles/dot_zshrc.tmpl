#!/usr/bin/env zsh

# This zshrc file uses zinit as a zsh plugin manager.
# More information: https://github.com/zdharma-continuum/zinit

# If not running interactively, don't do anything
#############################################
case $- in
    *i*) ;;
    *) return ;;
esac
[ -z "$PS1" ] && return

# duplicates slow down searching
#############################################
builtin declare -aU fpath
builtin declare -aU path
builtin declare -aU manpath
# FPATH should not be exported
builtin declare +x FPATH
# duplicates slow down searching and
# mess up OMZ fpath check if should remove zcompdump
fpath=(${(u)fpath})
path=(${(u)path})
manpath=(${(u)manpath})

# If zsh is emulating another shell, don't source .zshrc
#############################################
if [[ $0 == 'ksh' ]] || [[ $0 == 'sh' ]]; then
    source "${HOME}/.shrc"
    exit
elif [[ $0 == 'bash' ]]; then
    source "${HOME}/.bashrc"
    exit
fi

unset _myPaths _path

# Create XDG directories
#############################################
if [ ! -d "{{ .xdgCacheDir }}/zsh" ]; then
    mkdir -p "{{ .xdgCacheDir }}/zsh"
fi
if [ ! -d "{{ .xdgDataDir }}/zsh" ]; then
    mkdir -p "{{ .xdgDataDir }}/zsh"
fi
if [ ! -d "{{ .xdgStateDir }}/zsh" ]; then
    mkdir -p "{{ .xdgStateDir }}/zsh"
fi

# Source completions
if [ -d "{{ .xdgDataDir }}/zsh/completions" ]; then
    fpath+={{ .xdgDataDir }}/zsh/completions
fi

if [ -d "{{ .xdgDataDir }}/zsh/zsh-completions/src" ]; then
    fpath+={{ .xdgDataDir }}/zsh/zsh-completions/src
fi

{{ if eq .chezmoi.os "darwin" -}}
if type brew &>/dev/null; then
    fpath+="$(brew --prefix)/share/zsh/site-functions"
fi
{{- end }}

# Load Completions
#############################################
autoload -Uz compinit
compinit -d "{{ .xdgCacheDir }}/zsh/zcompdump-${ZSH_VERSION}"

# SOURCE Dotfiles
#############################################

# Files containing files *.zsh or *.sh to be sourced to your environment
configFileLocations=(
    "{{ .xdgConfigDir }}/dotfile_source"
)

for configFileLocation in "${configFileLocations[@]}"; do
    if [ -d "${configFileLocation}" ]; then
        while read -r configFile; do
            source "${configFile}"
        done < <(find "${configFileLocation}" \
            -maxdepth 2 \
            -type f \
            -name '*.zsh' \
            -o -name '*.sh' | sort)
    fi
done

unset configFileLocations configFileLocation

# Allow for local configuration not managed by chezmoi
if [ -f "${HOME}/.dotfiles.local" ]; then
    source "${HOME}/.dotfiles.local"
fi

alias sourcea='source ${HOME}/.zshrc' # Source this file to apply changes in the current shell
