{{- if and (eq .chezmoi.os "linux") (.dev_computer) (eq .chezmoi.arch "amd64" ) (not .is_ci_workflow) -}}
#!/usr/bin/env bash

{{ template "shared_script_utils.bash" . }}

_hasJQ_ # Confirm we have jq installed

VERBOSE=false
PACKAGE_NAME="git credential manager"
REPOSITORY="git-ecosystem/git-credential-manager"

header "Verify ${PACKAGE_NAME} installation and check for updates"

# Fetch the API response once and store it in a variable
API_RESPONSE=$(curl -s "https://api.github.com/repos/${REPOSITORY}/releases/latest")

# Extract the required information from the stored API response
LATEST_VERSION=$(echo "${API_RESPONSE}" | jq -r .tag_name | sed 's/v//g')
IS_PRE_RELEASE=$(echo "${API_RESPONSE}" | jq -r .prerelease)
IS_DRAFT=$(echo "${API_RESPONSE}" | jq -r .draft)
RELEASE_NOTES=$(echo "${API_RESPONSE}" | jq -r .html_url)

info "Latest version is ${LATEST_VERSION}"
debug "Is pre-release: ${IS_PRE_RELEASE}"
debug "Is draft: ${IS_DRAFT}"
debug "Release Notes: ${RELEASE_NOTES}"

if git credential-manager --version &>/dev/null; then
  CURRENT_VERSION=$(git credential-manager --version | grep -Po '\d+\.\d+\.\d+')

    info "Local version: ${CURRENT_VERSION}"

    if [[ ${CURRENT_VERSION} == "${LATEST_VERSION}" ]]; then
        success "${PACKAGE_NAME} is already up to date"
        _safeExit_ 0
    fi

    if [[ ${IS_PRE_RELEASE} == "true" ]] || [[ ${IS_DRAFT} == "true" ]]; then
        notice "Latest version is a pre-release or draft. Skipping update."
        _safeExit_ 0
    fi
fi
fi

_makeTempDir_ "$(basename "$0")"
pushd "${TMP_DIR}" &>/dev/null || exit

DEB="gcm-linux_{{.chezmoi.arch }}.${LATEST_VERSION}.deb"

wget https://github.com/git-ecosystem/git-credential-manager/releases/download/v${LATEST_VERSION}/${DEB}
sudo dpkg -i "${DEB}"
rm "${DEB}"

success "${PACKAGE_NAME} v${LATEST_VERSION} installed"
info "Release notes: ${RELEASE_NOTES}"

popd &>/dev/null || exit
_safeExit_
{{ end }}
