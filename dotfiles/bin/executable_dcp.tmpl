{{- if and (lookPath "docker") (not (joinPath .chezmoi.homeDir ".local/bin/dcp" | stat)) -}}

#!/usr/bin/env bash
# shellcheck source-path=SCRIPTDIR/../shell-scripting-templates/utilities
# shellcheck source-path=SCRIPTDIR/../../shell-scripting-templates/utilities

_mainScript_() {
    export COMPOSE_IGNORE_ORPHANS=True

    COMMAND1="${ARGS[0]:-}"
    COMMAND2="${ARGS[1]:-}"
    COMMAND3="${ARGS[2]:-}"

    #shellcheck disable=SC2064
    trap "$(shopt -p nocasematch)" RETURN # Reset nocasematch when function exits
    shopt -s nocasematch

    _validateComposeFile_() {
        # DESC:   Validate we have a compose file matching search term to work with
        # ARGS:		$1 (required):      File name to validate
        # OUTS:		true/false
        # USAGE:  _validateComposeFile_ "docker-compose.yml"
        # NOTE:

        local _fileName
        _fileName="$(basename "$1")"

        #shellcheck disable=SC2064
        trap "$(shopt -p nocasematch)" RETURN # reset nocasematch when function exits
        shopt -s nocasematch                  # Use case-insensitive regex

        if ! [[ ${_fileName} == *"${COMMAND2:-}"* ]]; then
            return 1
        fi

        # Validate it is a compose file
        if ! head -n 2 "${1}" | grep -q '^version: ' &>/dev/null; then
            debug "Skipping: ${_fileName} (Not a valid compose file)" ${LINENO}
            return 1
        fi
    }

    _findComposeFiles_() {
        # DESC:   Attempts to find a directory with docker-compose files.
        # ARGS:		None
        # OUTS:   ${COMPOSE_FILES[${i}]}
        # USAGE:  _findComposeFiles_
        # NOTE:

        while read -r COMPOSE_FILE; do
            if _validateComposeFile_ "${COMPOSE_FILE}"; then
                debug "valid:  ${COMPOSE_FILE}"
                COMPOSE_FILES+=("${COMPOSE_FILE}")
            fi
        done < <(find "${DOCKER_COMPOSE_FILES_PATH}" -maxdepth 1 -type f -name "*.yml" | sort)
        if [ ${#COMPOSE_FILES[@]} -eq 0 ]; then
            info "No valid docker compose files matching search found in current directory"
            _safeExit_
        fi

    }
    _findComposeFiles_

    # Use case-insensitive regex

    i=0

    if [[ ${COMMAND1} =~ clean ]]; then
        if _execute_ -vq "docker system prune -a"; then
            _safeExit_
        else
            _safeExit_ 1
        fi
    fi

    for COMPOSE_FILE in "${COMPOSE_FILES[@]}"; do
        case "${COMMAND1}" in
            list)
                i=$((i + 1))
                printf "[%s] %s\n" "${i}" "${COMPOSE_FILE}"
                ;;
            pull | update)
                if _execute_ -sv "docker-compose -f \"${COMPOSE_FILE}\" pull"; then
                    _execute_ -s "docker-compose -f \"${COMPOSE_FILE}\" down"
                    _execute_ -s "docker-compose -f \"${COMPOSE_FILE}\" up -d"
                fi
                ;;
            up | run)
                _execute_ -vs "docker-compose -f \"${COMPOSE_FILE}\" up -d" "Start ${COMPOSE_FILE}"
                ;;
            down | stop)
                _execute_ -vq "docker-compose -f \"${COMPOSE_FILE}\" down"
                ;;
            restart)
                _execute_ -vq "docker-compose -f \"${COMPOSE_FILE}\" restart"
                ;;
            exec)
                if [ -z "${COMMAND2}" ] || [ ${#COMPOSE_FILES[@]} -gt 1 ]; then
                    info "Must specify a single compose file for exec"
                    _safeExit_ 1
                fi

                CONTAINER_NAME="$(grep "container_name:" "${COMPOSE_FILE}" | awk '{print $2}')"

                notice "Must start docker exec manually. Use the following command"
                dryrun "docker exec -it ${CONTAINER_NAME} ${COMMAND3}"
                ;;
            logs)
                if [ -z "${COMMAND2}" ] || [ ${#COMPOSE_FILES[@]} -gt 1 ]; then
                    info "Must specify a single compose file to follow logs"
                    _safeExit_ 1
                fi

                CONTAINER_NAME="$(grep "container_name:" "${COMPOSE_FILE}" | awk '{print $2}')"
                if ${DRYRUN}; then
                    dryrun "docker logs -tf --tail=\"50\" ${CONTAINER_NAME}"
                else
                    # Allow killing the container without killing this script
                    # https://unix.stackexchange.com/questions/145656/how-to-return-to-underlying-script-from-tail-f
                    trap : INT # Ignore Ctrl+C
                    docker logs -tf --tail="50" "${CONTAINER_NAME}"
                    trap - INT # Restore Ctrl+C
                    _safeExit_
                fi
                ;;
            *)
                error "Unknown command: ${COMMAND1}" ${LINENO}
                ;;
        esac
    done

}

#/_mainsScript_()

# ################################## Flags and defaults
# # Required variables
LOGFILE="${HOME}/logs/$(basename "$0").log"
QUIET=false
LOGLEVEL=ERROR
VERBOSE=false
FORCE=false
DRYRUN=false
declare -a ARGS=()

# Script specific
COMMAND3="/bin/sh"
DOCKER_COMPOSE_FILES_PATH="."
declare -a COMPOSE_FILES=()

# ################################## Custom utility functions (Pasted from repository)

_safeExit_() {
    # DESC:
    #       Cleanup and exit from a script
    # ARGS:
    #       $1 (optional) - Exit code (defaults to 0)
    # OUTS:
    #       None

    if [[ -d ${SCRIPT_LOCK:-} ]]; then
        if command rm -rf "${SCRIPT_LOCK}"; then
            debug "Removing script lock"
        else
            warning "Script lock could not be removed. Try manually deleting ${yellow}'${SCRIPT_LOCK}'"
        fi
    fi

    if [[ -n ${TMP_DIR:-} && -d ${TMP_DIR:-} ]]; then
        if [[ ${1:-} == 1 && -n "$(ls "${TMP_DIR}")" ]]; then
            command rm -r "${TMP_DIR}"
        else
            command rm -r "${TMP_DIR}"
            debug "Removing temp directory"
        fi
    fi

    trap - INT TERM EXIT
    exit "${1:-0}"
}

_execute_() {
    # DESC:
    #         Executes commands while respecting global DRYRUN, VERBOSE, LOGGING, and QUIET flags
    # ARGS:
    #         $1 (Required) - The command to be executed.  Quotation marks MUST be escaped.
    #         $2 (Optional) - String to display after command is executed
    # OPTS:
    #         -v    Always print output from the execute function to STDOUT
    #         -n    Use NOTICE level alerting (default is INFO)
    #         -p    Pass a failed command with 'return 0'.  This effectively bypasses set -e.
    #         -e    Bypass _alert_ functions and use 'printf RESULT'
    #         -s    Use '_alert_ success' for successful output. (default is 'info')
    #         -q    Do not print output (QUIET mode)
    # OUTS:
    #         stdout: Configurable output
    # USE :
    #         _execute_ "cp -R \"~/dir/somefile.txt\" \"someNewFile.txt\"" "Optional message"
    #         _execute_ -sv "mkdir \"some/dir\""
    # NOTE:
    #         If $DRYRUN=true, no commands are executed and the command that would have been executed
    #         is printed to STDOUT using dryrun level alerting
    #         If $VERBOSE=true, the command's native output is printed to stdout. This can be forced
    #         with '_execute_ -v'

    local _localVerbose=false
    local _passFailures=false
    local _echoResult=false
    local _echoSuccessResult=false
    local _quietMode=false
    local _echoNoticeResult=false
    local opt

    local OPTIND=1
    while getopts ":vVpPeEsSqQnN" opt; do
        case ${opt} in
            v | V) _localVerbose=true ;;
            p | P) _passFailures=true ;;
            e | E) _echoResult=true ;;
            s | S) _echoSuccessResult=true ;;
            q | Q) _quietMode=true ;;
            n | N) _echoNoticeResult=true ;;
            *)
                {
                    error "Unrecognized option '$1' passed to _execute_. Exiting."
                    _safeExit_
                }
                ;;
        esac
    done
    shift $((OPTIND - 1))

    [[ $# == 0 ]] && fatal "Missing required argument to ${FUNCNAME[0]}"

    local _command="${1}"
    local _executeMessage="${2:-$1}"

    local _saveVerbose=${VERBOSE}
    if "${_localVerbose}"; then
        VERBOSE=true
    fi

    if "${DRYRUN:-}"; then
        if "${_quietMode}"; then
            VERBOSE=${_saveVerbose}
            return 0
        fi
        if [ -n "${2:-}" ]; then
            dryrun "${1} (${2})" "$(caller)"
        else
            dryrun "${1}" "$(caller)"
        fi
    elif ${VERBOSE:-}; then
        if eval "${_command}"; then
            if "${_quietMode}"; then
                VERBOSE=${_saveVerbose}
            elif "${_echoResult}"; then
                printf "%s\n" "${_executeMessage}"
            elif "${_echoSuccessResult}"; then
                success "${_executeMessage}"
            elif "${_echoNoticeResult}"; then
                notice "${_executeMessage}"
            else
                info "${_executeMessage}"
            fi
        else
            if "${_quietMode}"; then
                VERBOSE=${_saveVerbose}
            elif "${_echoResult}"; then
                printf "%s\n" "warning: ${_executeMessage}"
            else
                warning "${_executeMessage}"
            fi
            VERBOSE=${_saveVerbose}
            "${_passFailures}" && return 0 || return 1
        fi
    else
        if eval "${_command}" >/dev/null 2>&1; then
            if "${_quietMode}"; then
                VERBOSE=${_saveVerbose}
            elif "${_echoResult}"; then
                printf "%s\n" "${_executeMessage}"
            elif "${_echoSuccessResult}"; then
                success "${_executeMessage}"
            elif "${_echoNoticeResult}"; then
                notice "${_executeMessage}"
            else
                info "${_executeMessage}"
            fi
        else
            if "${_quietMode}"; then
                VERBOSE=${_saveVerbose}
            elif "${_echoResult}"; then
                printf "%s\n" "error: ${_executeMessage}"
            else
                warning "${_executeMessage}"
            fi
            VERBOSE=${_saveVerbose}
            "${_passFailures}" && return 0 || return 1
        fi
    fi
    VERBOSE=${_saveVerbose}
    return 0
}
_setColors_() {
    # DESC:
    #         Sets colors use for alerts.
    # ARGS:
    #         None
    # OUTS:
    #         None
    # USAGE:
    #         printf "%s\n" "${blue}Some text${reset}"

    if tput setaf 1 >/dev/null 2>&1; then
        bold=$(tput bold)
        underline=$(tput smul)
        reverse=$(tput rev)
        reset=$(tput sgr0)

        if [[ $(tput colors) -ge 256 ]] >/dev/null 2>&1; then
            white=$(tput setaf 231)
            blue=$(tput setaf 38)
            yellow=$(tput setaf 11)
            green=$(tput setaf 82)
            red=$(tput setaf 9)
            purple=$(tput setaf 171)
            gray=$(tput setaf 250)
        else
            white=$(tput setaf 7)
            blue=$(tput setaf 38)
            yellow=$(tput setaf 3)
            green=$(tput setaf 2)
            red=$(tput setaf 9)
            purple=$(tput setaf 13)
            gray=$(tput setaf 7)
        fi
    else
        bold="\033[4;37m"
        reset="\033[0m"
        underline="\033[4;37m"
        # shellcheck disable=SC2034
        reverse=""
        white="\033[0;37m"
        blue="\033[0;34m"
        yellow="\033[0;33m"
        green="\033[1;32m"
        red="\033[0;31m"
        purple="\033[0;35m"
        gray="\033[0;37m"
    fi
}

_alert_() {
    # DESC:
    #         Controls all printing of messages to log files and stdout.
    # ARGS:
    #         $1 (required) - The type of alert to print
    #                         (success, header, notice, dryrun, debug, warning, error,
    #                         fatal, info, input)
    #         $2 (required) - The message to be printed to stdout and/or a log file
    #         $3 (optional) - Pass '${LINENO}' to print the line number where the _alert_ was triggered
    # OUTS:
    #         stdout: The message is printed to stdout
    #         log file: The message is printed to a log file
    # USAGE:
    #         [_alertType] "[MESSAGE]" "${LINENO}"
    # NOTES:
    #         - The colors of each alert type are set in this function
    #         - For specified alert types, the funcstac will be printed

    local _color
    local _alertType="${1}"
    local _message="${2}"
    local _line="${3:-}" # Optional line number

    [[ $# -lt 2 ]] && fatal 'Missing required argument to _alert_'

    if [[ -n ${_line} && ${_alertType} =~ ^(fatal|error) && ${FUNCNAME[2]} != "_trapCleanup_" ]]; then
        _message="${_message} ${gray}(line: ${_line}) $(_printFuncStack_)"
    elif [[ -n ${_line} && ${FUNCNAME[2]} != "_trapCleanup_" ]]; then
        _message="${_message} ${gray}(line: ${_line})"
    elif [[ -z ${_line} && ${_alertType} =~ ^(fatal|error) && ${FUNCNAME[2]} != "_trapCleanup_" ]]; then
        _message="${_message} ${gray}$(_printFuncStack_)"
    fi

    if [[ ${_alertType} =~ ^(error|fatal) ]]; then
        _color="${bold}${red}"
    elif [ "${_alertType}" == "info" ]; then
        _color="${gray}"
    elif [ "${_alertType}" == "warning" ]; then
        _color="${red}"
    elif [ "${_alertType}" == "success" ]; then
        _color="${green}"
    elif [ "${_alertType}" == "debug" ]; then
        _color="${purple}"
    elif [ "${_alertType}" == "header" ]; then
        _color="${bold}${white}${underline}"
    elif [ "${_alertType}" == "notice" ]; then
        _color="${bold}"
    elif [ "${_alertType}" == "input" ]; then
        _color="${bold}${underline}"
    elif [ "${_alertType}" = "dryrun" ]; then
        _color="${blue}"
    else
        _color=""
    fi

    _writeToScreen_() {
        [[ ${QUIET} == true ]] && return 0 # Print to console when script is not 'quiet'
        [[ ${VERBOSE} == false && ${_alertType} =~ ^(debug|verbose) ]] && return 0

        if ! [[ -t 1 || -z ${TERM:-} ]]; then # Don't use colors on non-recognized terminals
            _color=""
            reset=""
        fi

        if [[ ${_alertType} == header ]]; then
            printf "${_color}%s${reset}\n" "${_message}"
        else
            printf "${_color}[%7s] %s${reset}\n" "${_alertType}" "${_message}"
        fi
    }
    _writeToScreen_

    _writeToLog_() {
        [[ ${_alertType} == "input" ]] && return 0
        [[ ${LOGLEVEL} =~ (off|OFF|Off) ]] && return 0
        if [ -z "${LOGFILE:-}" ]; then
            LOGFILE="$(pwd)/$(basename "$0").log"
        fi
        [ ! -d "$(dirname "${LOGFILE}")" ] && mkdir -p "$(dirname "${LOGFILE}")"
        [[ ! -f ${LOGFILE} ]] && touch "${LOGFILE}"

        # Don't use colors in logs
        local _cleanmessage
        _cleanmessage="$(printf "%s" "${_message}" | sed -E 's/(\x1b)?\[(([0-9]{1,2})(;[0-9]{1,3}){0,2})?[mGK]//g')"
        # Print message to log file
        printf "%s [%7s] %s %s\n" "$(date +"%b %d %R:%S")" "${_alertType}" "[$(/bin/hostname)]" "${_cleanmessage}" >>"${LOGFILE}"
    }

    # Write specified log level data to logfile
    case "${LOGLEVEL:-ERROR}" in
        ALL | all | All)
            _writeToLog_
            ;;
        DEBUG | debug | Debug)
            _writeToLog_
            ;;
        INFO | info | Info)
            if [[ ${_alertType} =~ ^(error|fatal|warning|info|notice|success) ]]; then
                _writeToLog_
            fi
            ;;
        NOTICE | notice | Notice)
            if [[ ${_alertType} =~ ^(error|fatal|warning|notice|success) ]]; then
                _writeToLog_
            fi
            ;;
        WARN | warn | Warn)
            if [[ ${_alertType} =~ ^(error|fatal|warning) ]]; then
                _writeToLog_
            fi
            ;;
        ERROR | error | Error)
            if [[ ${_alertType} =~ ^(error|fatal) ]]; then
                _writeToLog_
            fi
            ;;
        FATAL | fatal | Fatal)
            if [[ ${_alertType} =~ ^fatal ]]; then
                _writeToLog_
            fi
            ;;
        OFF | off)
            return 0
            ;;
        *)
            if [[ ${_alertType} =~ ^(error|fatal) ]]; then
                _writeToLog_
            fi
            ;;
    esac

} # /_alert_

error() { _alert_ error "${1}" "${2:-}"; }
warning() { _alert_ warning "${1}" "${2:-}"; }
notice() { _alert_ notice "${1}" "${2:-}"; }
info() { _alert_ info "${1}" "${2:-}"; }
success() { _alert_ success "${1}" "${2:-}"; }
dryrun() { _alert_ dryrun "${1}" "${2:-}"; }
input() { _alert_ input "${1}" "${2:-}"; }
header() { _alert_ header "${1}" "${2:-}"; }
debug() { _alert_ debug "${1}" "${2:-}"; }
fatal() {
    _alert_ fatal "${1}" "${2:-}"
    return 1
}

_printFuncStack_() {
    # DESC:
    #         Prints the function stack in use. Used for debugging, and error reporting.
    # ARGS:
    #         None
    # OUTS:
    #         stdout: Prints [function]:[file]:[line]
    # NOTE:
    #         Does not print functions from the alert class
    local _i
    declare -a _funcStackResponse=()
    for ((_i = 1; _i < ${#BASH_SOURCE[@]}; _i++)); do
        case "${FUNCNAME[${_i}]}" in
            _alert_ | _trapCleanup_ | fatal | error | warning | notice | info | debug | dryrun | header | success)
                continue
                ;;
            *)
                _funcStackResponse+=("${FUNCNAME[${_i}]}:$(basename "${BASH_SOURCE[${_i}]}"):${BASH_LINENO[_i - 1]}")
                ;;
        esac

    done
    printf "( "
    printf %s "${_funcStackResponse[0]}"
    printf ' < %s' "${_funcStackResponse[@]:1}"
    printf ' )\n'
}

_useGNUutils_() {
    # DESC:
    #					Add GNU utilities to PATH to allow consistent use of sed/grep/tar/etc. on MacOS
    # ARGS:
    #					None
    # OUTS:
    #					0 if successful
    #         1 if unsuccessful
    #         PATH: Adds GNU utilities to the path
    # USAGE:
    #					# if ! _useGNUUtils_; then exit 1; fi
    # NOTES:
    #					GNU utilities can be added to MacOS using Homebrew

    ! declare -f "_setPATH_" &>/dev/null && fatal "${FUNCNAME[0]} needs function _setPATH_"

    if _setPATH_ \
        "/usr/local/opt/gnu-tar/libexec/gnubin" \
        "/usr/local/opt/coreutils/libexec/gnubin" \
        "/usr/local/opt/gnu-sed/libexec/gnubin" \
        "/usr/local/opt/grep/libexec/gnubin" \
        "/usr/local/opt/findutils/libexec/gnubin" \
        "/opt/homebrew/opt/findutils/libexec/gnubin" \
        "/opt/homebrew/opt/gnu-sed/libexec/gnubin" \
        "/opt/homebrew/opt/grep/libexec/gnubin" \
        "/opt/homebrew/opt/coreutils/libexec/gnubin" \
        "/opt/homebrew/opt/gnu-tar/libexec/gnubin"; then
        return 0
    else
        return 1
    fi

}

_setPATH_() {
    # DESC:
    #         Add directories to $PATH so script can find executables
    # ARGS:
    #         $@ - One or more paths
    # OPTS:
    #         -x - Fail if directories are not found
    # OUTS:
    #         0: Success
    #         1: Failure
    #         Adds items to $PATH
    # USAGE:
    #         _setPATH_ "/usr/local/bin" "${HOME}/bin" "$(npm bin)"

    [[ $# == 0 ]] && fatal "Missing required argument to ${FUNCNAME[0]}"

    local opt
    local OPTIND=1
    local _failIfNotFound=false

    while getopts ":xX" opt; do
        case ${opt} in
            x | X) _failIfNotFound=true ;;
            *)
                {
                    error "Unrecognized option '${1}' passed to _backupFile_" "${LINENO}"
                    return 1
                }
                ;;
        esac
    done
    shift $((OPTIND - 1))

    local _newPath

    for _newPath in "$@"; do
        if [ -d "${_newPath}" ]; then
            if ! printf "%s" "${PATH}" | grep -Eq "(^|:)${_newPath}($|:)"; then
                if PATH="${_newPath}:${PATH}"; then
                    debug "Added '${_newPath}' to PATH"
                else
                    debug "'${_newPath}' already in PATH"
                fi
            else
                debug "_setPATH_: '${_newPath}' already exists in PATH"
            fi
        else
            debug "_setPATH_: can not find: ${_newPath}"
            if [[ ${_failIfNotFound} == true ]]; then
                return 1
            fi
            continue
        fi
    done
    return 0
}

# ################################## Functions required for this template to work

_trapCleanup_() {
    # DESC:
    #         Log errors and cleanup from script when an error is trapped.  Called by 'trap'
    # ARGS:
    #         $1:  Line number where error was trapped
    #         $2:  Line number in function
    #         $3:  Command executing at the time of the trap
    #         $4:  Names of all shell functions currently in the execution call stack
    #         $5:  Scriptname
    #         $6:  $BASH_SOURCE
    # USAGE:
    #         trap '_trapCleanup_ ${LINENO} ${BASH_LINENO} "${BASH_COMMAND}" "${FUNCNAME[*]}" "${0}" "${BASH_SOURCE[0]}"' EXIT INT TERM SIGINT SIGQUIT SIGTERM ERR
    # OUTS:
    #         Exits script with error code 1

    local _line=${1:-} # LINENO
    local _linecallfunc=${2:-}
    local _command="${3:-}"
    local _funcstack="${4:-}"
    local _script="${5:-}"
    local _sourced="${6:-}"

    if [[ "$(declare -f "fatal")" && "$(declare -f "_printFuncStack_")" ]]; then

        _funcstack="'$(printf "%s" "${_funcstack}" | sed -E 's/ / < /g')'"

        if [[ ${_script##*/} == "${_sourced##*/}" ]]; then
            fatal "${7:-} command: '${_command}' (line: ${_line}) [func: $(_printFuncStack_)]"
        else
            fatal "${7:-} command: '${_command}' (func: ${_funcstack} called at line ${_linecallfunc} of '${_script##*/}') (line: ${_line} of '${_sourced##*/}') "
        fi
    else
        printf "%s\n" "Fatal error trapped. Exiting..."
    fi

    if [ "$(declare -f "_safeExit_")" ]; then
        _safeExit_ 1
    else
        exit 1
    fi
}

_findBaseDir_() {
    # DESC:
    #         Locates the real directory of the script being run. Similar to GNU readlink -n
    # ARGS:
    #         None
    # OUTS:
    #         stdout: prints result
    # USAGE:
    #         baseDir="$(_findBaseDir_)"
    #         cp "$(_findBaseDir_ "somefile.txt")" "other_file.txt"

    local _source
    local _dir

    # Is file sourced?
    [[ $_ != "$0" ]] \
        && _source="${BASH_SOURCE[1]}" \
        || _source="${BASH_SOURCE[0]}"

    while [ -h "${_source}" ]; do # Resolve $SOURCE until the file is no longer a symlink
        _dir="$(cd -P "$(dirname "${_source}")" && pwd)"
        _source="$(readlink "${_source}")"
        [[ ${_source} != /* ]] && _source="${_dir}/${_source}" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
    done
    printf "%s\n" "$(cd -P "$(dirname "${_source}")" && pwd)"
}

_sourceUtilities_() {
    # DESC:
    #         Sources utility functions.  Absolute paths are required for shellcheck to correctly
    #         parse the sourced files
    # ARGS:
    #					$1 (Required):  Absolute path to the directory containing the utilities
    # OUTS:
    #					 0:  Success
    #					 1:  Failure
    # USAGE:
    #					_sourceUtilities_ "$(_findBaseDir_)/../../shell-scripting-templates/utilities"

    local _utilsPath
    _utilsPath="${1}"

    if [ -f "${_utilsPath}/alerts.bash" ]; then
        source "${_utilsPath}/alerts.bash"
    else
        printf "%s\n" "ERROR: ${_utilsPath}/alerts.bash not found"
        exit 1
    fi

    if [ -f "${_utilsPath}/arrays.bash" ]; then
        source "${_utilsPath}/arrays.bash"
    else
        printf "%s\n" "ERROR: ${_utilsPath}/arrays.bash not found"
        exit 1
    fi

    if [ -f "${_utilsPath}/checks.bash" ]; then
        source "${_utilsPath}/checks.bash"
    else
        printf "%s\n" "ERROR: ${_utilsPath}/checks.bash not found"
        exit 1
    fi

    if [ -f "${_utilsPath}/dates.bash" ]; then
        source "${_utilsPath}/dates.bash"
    else
        printf "%s\n" "ERROR: ${_utilsPath}/dates.bash not found"
        exit 1
    fi

    if [ -f "${_utilsPath}/debug.bash" ]; then
        source "${_utilsPath}/debug.bash"
    else
        printf "%s\n" "ERROR: ${_utilsPath}/debug.bash not found"
        exit 1
    fi

    if [ -f "${_utilsPath}/files.bash" ]; then
        source "${_utilsPath}/files.bash"
    else
        printf "%s\n" "ERROR: ${_utilsPath}/files.bash not found"
        exit 1
    fi

    if [ -f "${_utilsPath}/macOS.bash" ]; then
        source "${_utilsPath}/macOS.bash"
    else
        printf "%s\n" "ERROR: ${_utilsPath}/macOS.bash not found"
        exit 1
    fi

    if [ -f "${_utilsPath}/misc.bash" ]; then
        source "${_utilsPath}/misc.bash"
    else
        printf "%s\n" "ERROR: ${_utilsPath}/misc.bash not found"
        exit 1
    fi

    if [ -f "${_utilsPath}/services.bash" ]; then
        source "${_utilsPath}/services.bash"
    else
        printf "%s\n" "ERROR: ${_utilsPath}/services.bash not found"
        exit 1
    fi

    if [ -f "${_utilsPath}/strings.bash" ]; then
        source "${_utilsPath}/strings.bash"
    else
        printf "%s\n" "ERROR: ${_utilsPath}/strings.bash not found"
        exit 1
    fi

    if [ -f "${_utilsPath}/template_utils.bash" ]; then
        source "${_utilsPath}/template_utils.bash"
    else
        printf "%s\n" "ERROR: ${_utilsPath}/template_utils.bash not found"
        exit 1
    fi
}

_parseOptions_() {
    # DESC:
    #					Iterates through options passed to script and sets variables. Will break -ab into -a -b
    #         when needed and --foo=bar into --foo bar
    # ARGS:
    #					$@ from command line
    # OUTS:
    #					Sets array 'ARGS' containing all arguments passed to script that were not parsed as options
    # USAGE:
    #					_parseOptions_ "$@"

    # Iterate over options
    local _optstring=h
    declare -a _options
    local _c
    local i
    while (($#)); do
        case $1 in
            # If option is of type -ab
            -[!-]?*)
                # Loop over each character starting with the second
                for ((i = 1; i < ${#1}; i++)); do
                    _c=${1:i:1}
                    _options+=("-${_c}") # Add current char to options
                    # If option takes a required argument, and it's not the last char make
                    # the rest of the string its argument
                    if [[ ${_optstring} == *"${_c}:"* && ${1:i+1} ]]; then
                        _options+=("${1:i+1}")
                        break
                    fi
                done
                ;;
            # If option is of type --foo=bar
            --?*=*) _options+=("${1%%=*}" "${1#*=}") ;;
            # add --endopts for --
            --) _options+=(--endopts) ;;
            # Otherwise, nothing special
            *) _options+=("$1") ;;
        esac
        shift
    done
    set -- "${_options[@]:-}"
    unset _options

    # Read the options and set stuff
    # shellcheck disable=SC2034
    while [[ ${1:-} == -?* ]]; do
        case $1 in
            # Custom options
            --dir | --directory)
                shift
                DOCKER_COMPOSE_FILES_PATH="${1}"
                ;;

            # Common options
            -h | --help)
                _usage_
                _safeExit_
                ;;
            --loglevel)
                shift
                LOGLEVEL=${1}
                ;;
            --logfile)
                shift
                LOGFILE="${1}"
                ;;
            -n | --dryrun) DRYRUN=true ;;
            -v | --verbose) VERBOSE=true ;;
            -q | --quiet) QUIET=true ;;
            --force) FORCE=true ;;
            --endopts)
                shift
                break
                ;;
            *)
                if [ "$(declare -f "_safeExit_")" ]; then
                    fatal "invalid option: $1"
                else
                    printf "%s\n" "Invalid option: $1"
                    exit 1
                fi
                ;;
        esac
        shift
    done

    if [[ -z ${*} || ${*} == null ]]; then
        ARGS=()
    else
        ARGS+=("$@") # Store the remaining user input as arguments.
    fi
}

_usage_() {
    cat <<USAGE_TEXT

  ${bold}$(basename "$0") [OPTION] [ACTION]... [FILE or WORD]...${reset}

  Docker and docker-compose wrapper.  Provides the following functionality:

    - Shorthand for 'docker-compoose -f [FILE] [COMMAND]'
    - Automates pulling new images associated with docker-compose files
    - Shorthand commands for common Docker cleanup tasks

  ${bold}${underline}Actions:${reset}
    clean           Removes dangling images and dangling volumes
    down            Stops and removes containers
    exec            Enters an interactive shell within a running container. (Defaults to '/bin/sh')
    list            Lists valid docker-compose files
    logs            Tails logs from specified container
    pull            Pulls new images associated with docker-compose files
    restart             Restarts containers
    up          Starts containers in detached mode

  ${bold}${underline}Options:${reset}
    -dir [PATH]          Specify directory that contains docker-compose.yml files. (Default is current directory)
    -h, --help           Display this help and exit
    --loglevel [LEVEL]   One of: FATAL, ERROR (Default), WARN, INFO, DEBUG, ALL, OFF
    --logfile [FILE]     Full PATH to logfile.  (Default is '\${HOME}/logs/$(basename "$0").log')
    -n, --dryrun         Non-destructive. Makes no permanent changes.
    -q, --quiet          Quiet (no output)
    -v, --verbose        Output more information. (Items echoed to 'verbose')
    --force              Skip all user interaction.  Implied 'Yes' to all actions.

  ${bold}Example Usage:${reset}

    ${gray}# Pull new images associated with docker-compose file '*plex*.yml' in verbose mode${reset}
    $ $(basename "$0") -v pull plex

    ${gray}# Pull new images associated with any docker-compose files in current directory${reset}
    $ $(basename "$0") pull

    ${gray}# Enter an interactive BASH shell in a compose file in a specified directory${reset}
    $ $(basename "$0") --dir=/path/to/compose/files exec plex "/bin/bash"
USAGE_TEXT
}

# ################################## INITIALIZE AND RUN THE SCRIPT
#                                    (Comment or uncomment the lines below to customize script behavior)

trap '_trapCleanup_ ${LINENO} ${BASH_LINENO} "${BASH_COMMAND}" "${FUNCNAME[*]}" "${0}" "${BASH_SOURCE[0]}"' EXIT INT TERM SIGINT SIGQUIT SIGTERM

# Trap errors in subshells and functions
set -o errtrace

# Exit on error. Append '||true' if you expect an error
set -o errexit

# Use last non-zero exit code in a pipeline
set -o pipefail

# Confirm we have BASH greater than v4
[ "${BASH_VERSINFO:-0}" -ge 4 ] || {
    printf "%s\n" "ERROR: BASH_VERSINFO is '${BASH_VERSINFO:-0}'.  This script requires BASH v4 or greater."
    exit 1
}

# Make `for f in *.txt` work when `*.txt` matches zero files
shopt -s nullglob globstar

# Set IFS to preferred implementation
IFS=$' \n\t'

# Run in debug mode
# set -o xtrace

# Source utility functions
# _sourceUtilities_ "$(_findBaseDir_)/../../shell-scripting-templates/utilities"

# Initialize color constants
_setColors_

# Disallow expansion of unset variables
set -o nounset

# Force arguments when invoking the script
[[ $# -eq 0 ]] && _parseOptions_ "-h"

# Parse arguments passed to script
_parseOptions_ "$@"

# Create a temp directory '$TMP_DIR'
# _makeTempDir_ "$(basename "$0")"

# Acquire script lock
# _acquireScriptLock_

# Source GNU utilities for use on MacOS
_useGNUutils_

# Run the main logic script
_mainScript_

# Exit cleanly
_safeExit_

{{ end -}}
